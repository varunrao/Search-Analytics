# Copyright 2013 Cloudera Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

morphlines : [
  {
    id : morphline1
    importCommands : ["org.kitesdk.**", "com.ngdata.**"]
    
    commands : [                    
      {
        # The extractHBaseCells morphline command extracts cells from an HBase Result 
        # and transforms the resulting values into a SolrInputDocument.
        # It consists of an array of zero or more mapping specifications.
        extractHBaseCells {
          mappings : [
            {
              # The inputColumn specifies the data to be used from HBase for populating the field in Solr. 
              # It takes the form of a column family name and qualifier, separated by a colon.
              # The qualifier portion can end in an asterisk, which is interpreted as a wildcard. 
              # In this case, all matching column-family and qualifier expressions will be used.
              #
              # The following are examples of valid inputColumn values:
              # 
              # mycolumnfamily:myqualifier
              # mycolumnfamily:my*
              # mycolumnfamily:*
              inputColumn : "cfA:qualifierA"
              
              # The outputField specifies the morphline record field (aka Solr document field) to add output values to
              outputField : fieldA
              
              
              # The type parameter defines the datatype of the content in HBase.
              # Because all data is stored in HBase as byte arrays, but all content in Solr is indexed as text, 
              # a method for converting from byte arrays to the actual datatype is needed. 
              # The type parameter can be the name of a type that is supported by org.apache.hadoop.hbase.util.Bytes.toXXX 
              # (currently: "byte[]", "int", "long", "string", "boolean", "float", "double", "short", bigdecimal"), 
              # or it can be the name of a class that implements the ByteArrayValueMapper interface.
              # Use type "byte[]" to pass the byte array through to the morphline without any conversion.
              type : int
              
              # The source parameter determines what portion of an HBase KeyValue will be used as indexing content. 
              # It has two possible values: "value" or "qualifier".
              # When "value" is specified (which is the case by default), then the cell value is used as input for indexing.
              # When "qualifier" is specified, then the column qualifier is used as input for indexing.
              source : value
            },
            
            {
              inputColumn : "cfB:qual*"
              outputField : fieldB
              type : string
            }
          ]
        }
      }
      
      { logDebug { format : "output record: {}", args : ["@{}"] } }    
    ]
  }
]
